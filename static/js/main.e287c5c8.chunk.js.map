{"version":3,"sources":["customHooks/traerDatos.js","customHooks/useFetchClimaPorCoords.js","customHooks/useFetchClimaCiudadesPorNombre.js","pronosticoClima/DatosBasicos.js","pronosticoClima/DatosPrincipales.js","pronosticoClima/PronosticoSemana.js","pronosticoClima/GraficaDia.js","pronosticoClima/PantallaCarga.js","pronosticoClima/CuerpoDatos.js","Ciudades/Ciudad.js","Ciudades/CiudadesBuscadas.js","Contenido.js","Buscador/BotonBusqueda.js","Buscador/InputCiudad.js","Buscador/Buscador.js","PronosticoClima.js","reportWebVitals.js","index.js"],"names":["traerDatos","url","a","axios","get","then","res","catch","err","console","error","response","useFetchClimaPorCoords","coords","coordsCargando","useState","datos","setDatos","cargando","setCargando","useEffect","montarDatos","urlDatosLugarBuscado","lat","lon","data","useFetchClimaCiudadesPorNombre","lugarBuscado","lugarCargando","mensajeResultado","setMensajeResultado","urlLugarBuscado","resultadoLimpio","JSON","parse","replace","list","length","status","DatosBasicos","props","current","humidity","Math","round","pressure","wind_speed","HeaderDatos","datosNombreLugar","className","name","sys","country","temp","floor","daily","min","max","weather","description","src","icon","alt","PronosticoSemana","dias","meses","keyID","map","dia","fecha","Date","dt","log","getDay","getDate","getMonth","datosGraficos","Map","dataKey","fill","stroke","unit","GraficaDia","graficoEnPantalla","setGraficoEnPantalla","datosDia","slice","forEach","hora","tiempoEnHoras","toLocaleTimeString","hour","minute","push","Temperatura","Humedad","Viento","Hora","ResponsiveContainer","width","height","AreaChart","Area","type","XAxis","Tooltip","id","onClick","styled","h1","CuerpoDatos","datosNombre","DatosPrincipales","hourly","Ciudad","temperatura","main","pruebaLevantarEstado","coord","CiudadesBuscadas","ciudades","datosCiudad","Contenido","climaCiudadesPorNombre","climaPorCoords","coordsCiudadCargando","BotonBusqueda","levantarBusqueda","lugarEnBusqueda","InputCiudad","onChange","event","levantarInput","Buscador","PronosticoClima","setLugarEnBusqueda","setLugarBuscado","setLugarCargando","setDatosCiudad","coordsCiudad","setCoordsCiudad","setCoordsCiudadCargando","resultadoClimaCiudadesPorNombre","resultadoClimaPorCoords","mensajeDeCarga","target","value","datosCiudadLevantados","coordsCiudadLevantados","coordsCiudadCargandoLevantados","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e287c5c8.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst traerDatos = async (url) => {\r\n    return await axios\r\n        .get(url)\r\n        .then((res) => {\r\n            return res;\r\n        })\r\n        .catch((err) => {\r\n            console.error(err);\r\n            return err.response;\r\n        });\r\n};\r\n\r\nexport default traerDatos;","import {useState, useEffect} from \"react\";\r\nimport traerDatos from \"./traerDatos\";\r\n\r\n\r\nfunction useFetchClimaPorCoords (coords, coordsCargando) {\r\n    \r\n    const [datos, setDatos] = useState(null);\r\n    const [cargando, setCargando] = useState(true);\r\n\r\n\r\n    useEffect(()=>{\r\n        if(coordsCargando === false) {\r\n            const montarDatos = async () => {\r\n                \r\n                const urlDatosLugarBuscado = `https://api.openweathermap.org/data/2.5/onecall?lat=${coords.lat}&lon=${coords.lon}&lang=es&exclude=minutely,alerts&units=metric&appid=cfdf46ac4ccb5e3a4775488af2e57ce0`;\r\n    \r\n    \r\n                await traerDatos(urlDatosLugarBuscado)\r\n                .then((res) =>{\r\n                    setDatos(res.data);\r\n                    setCargando(false);\r\n                });\r\n            }\r\n        \r\n            setCargando(true);\r\n            montarDatos();\r\n        }  \r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [coordsCargando]);\r\n\r\n\r\n    return {datos, cargando}\r\n}\r\n\r\nexport default useFetchClimaPorCoords;","import {useState, useEffect} from \"react\";\r\nimport traerDatos from \"./traerDatos\";\r\n\r\nfunction useFetchClimaCiudadesPorNombre (lugarBuscado,lugarCargando) {\r\n    const [datos, setDatos] = useState(null);\r\n    const [cargando, setCargando] = useState(true);\r\n\r\n    const [mensajeResultado, setMensajeResultado] = useState(\"¡Busque el clima de cualquier ciudad!\");\r\n\r\n    useEffect(() =>{\r\n\r\n        if(lugarCargando === false && lugarBuscado !== null){\r\n            const montarDatos = async () => {\r\n\r\n                const urlLugarBuscado = `http://openweathermap.org/data/2.5/find?callback=?&q=${lugarBuscado}&lang=es&units=metric&&type=like&sort=population&cnt=30&appid=439d4b804bc8187953eb36d2a8c26a02`\r\n    \r\n                setCargando(true);\r\n                setMensajeResultado(\"Cargando\");\r\n\r\n                await traerDatos(urlLugarBuscado)\r\n                .then((res) =>{\r\n                    const resultadoLimpio = JSON.parse(res.data.replace(/[\\\\?()]/g, \"\"));\r\n                    setDatos(resultadoLimpio);\r\n\r\n\r\n                    switch (true) {\r\n\r\n                        case resultadoLimpio.list.length === 0:\r\n                            setCargando(true);\r\n                            setMensajeResultado(\"Ciudad no encontrada. Revise su busqueda \");\r\n                            break;\r\n                        case res.status === 200:\r\n                                setCargando(false);\r\n                                setMensajeResultado(\"Cargando\");\r\n                            break;\r\n                        case res.status >= 500:\r\n                            setCargando(true);\r\n                            setMensajeResultado(\"Ha ocurrido un error en el servidor, Intenté más tarde por favor\");\r\n                            break;\r\n                        default:\r\n                            setCargando(true);\r\n                            setMensajeResultado(\"Ha ocurrido un error desconocido. Intenté más tarde por favor\");\r\n                            break;\r\n                    }\r\n                });\r\n\r\n\r\n                \r\n            }\r\n            montarDatos();\r\n        }\r\n\r\n\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [lugarCargando])\r\n\r\n    return {datos, cargando, mensajeResultado}\r\n}\r\n\r\nexport default useFetchClimaCiudadesPorNombre;","function DatosBasicos(props) {\r\n\r\n    const datos = props.datos;\r\n\r\n    return (\r\n        <div>\r\n            <ul>\r\n                <li>Humedad a {`${datos.current.humidity}%`}</li>\r\n                <li>Presión a {`${Math.round(datos.current.pressure * 0.0145 * 100) / 100} PSI`}</li> \r\n                {/*La presión es convertida de hectopascales a PSI y es redondeada a dos decimales*/}\r\n                <li>Viento a {`${datos.current.wind_speed} m/s`}</li>\r\n            </ul>\r\n        </div>\r\n    );\r\n\r\n\r\n}\r\n\r\nexport default DatosBasicos;\r\n","import DatosBasicos from \"./DatosBasicos\";\n\nfunction HeaderDatos(props) {\n\n  const datos = props.datos;\n  const datosNombreLugar = props.datosNombreLugar;\n    return (\n      <div className=\"datos-principales\">\n        <header className=\"datos-principales-header\"> \n            <h1>{`${datosNombreLugar.name}, ${datosNombreLugar.sys.country}`}</h1>\n            <h2>{`${datos.current.temp}°`}</h2>\n            <h2>{`${Math.floor(datos.daily[0].temp.min)}°`}/\n                {`${Math.floor(datos.daily[0].temp.max)}°`}\n            </h2>\n            <h3 className=\"datos-principales-descripcion\">{datos.current.weather[0].description}</h3>\n            <img \n            src={`http://openweathermap.org/img/wn/${datos.current.weather[0].icon}@2x.png`} \n            alt={`Imagen de${datos.current.weather[0].description}`}\n            className=\"datos-principales-imagen\"/>\n        </header>\n        <DatosBasicos datos={datos}></DatosBasicos>\n      </div>\n    );\n  \n\n}\n\nexport default HeaderDatos;\n","function PronosticoSemana(props) {\r\n    const datos = props.datos;\r\n    const dias = [\"lunes\", \"martes\", \"miercoles\", \"jueves\", \"viernes\", \"sabado\", \"domingo\"];\r\n    const meses = [\"Ene\", \"Feb\", \"Mar\", \"Abr\", \"May\", \"Jun\", \"Jul\", \"Ago\", \"Sep\", \"Oct\", \"Nov\", \"Dic\"]\r\n\r\n    var keyID = 0;\r\n\r\n    return (\r\n\r\n        <div className=\"pronostico-semana\">\r\n            <h2 className=\"pronostico-semana-titulo\">Pronostico de la Semana</h2>\r\n            <div className=\"pronostico-semana-dias\">\r\n                {datos.daily.map((dia) => {\r\n                    keyID += 1;\r\n                    const fecha = new Date(dia.dt *1000);\r\n                    console.log(`${dias[fecha.getDay()]}, ${fecha.getDate()}/${meses[fecha.getMonth()]}`);\r\n                    return(\r\n                        <div key={keyID} className=\"pronostico-semana-dia\">\r\n                            <p>\r\n                                {`${Math.floor(dia.temp.min)}°`}/\r\n                                {`${Math.floor(dia.temp.max)}°`}   \r\n                            </p>\r\n                            <img \r\n                                src={`http://openweathermap.org/img/wn/${dia.weather[0].icon}@2x.png`} \r\n                                alt={`Imagen de${dia.weather[0].description}`}\r\n                                className=\"pronostico-semana-imagen\"/>\r\n                            <p>\r\n                                {`${dias[fecha.getDay()]}, ${fecha.getDate()}/${meses[fecha.getMonth()]}`} \r\n                            </p>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n\r\n}\r\n\r\nexport default PronosticoSemana;\r\n","import {useState} from \"react\";\r\nimport {AreaChart, Area, XAxis, Tooltip, ResponsiveContainer} from \"recharts\";\r\n\r\n\r\nconst datosGraficos = new Map([\r\n  [\r\n    \"temperatura\",\r\n    {\r\n      dataKey: \"Temperatura\",\r\n      fill: \"#f2a735\",\r\n      stroke: \"#bf790d\",\r\n      unit: \" C°\",\r\n    },\r\n  ],\r\n  [\r\n    \"humedad\",\r\n    {\r\n      dataKey: \"Humedad\",\r\n      fill: \"#4b87cc\",\r\n      stroke: \"#2b62a1\",\r\n      unit: \" %\",\r\n    },\r\n  ],\r\n  [\r\n    \"viento\",\r\n    {\r\n      dataKey: \"Viento\",\r\n      fill: \"#a662de\",\r\n      stroke: \"#7e34a8\",\r\n      unit: \" m/s\",\r\n    },\r\n  ],\r\n]);\r\n\r\n\r\nfunction GraficaDia(props) {\r\n  const [graficoEnPantalla, setGraficoEnPantalla] = useState(datosGraficos.get(\"temperatura\"));\r\n  var datosDia = [];\r\n\r\n\r\n  const datosPorHora = props.datos.slice(0, 12);\r\n\r\n  datosPorHora.forEach((hora) => {\r\n      var tiempoEnHoras = new Date(hora.dt * 1000).toLocaleTimeString([], {\r\n        hour: \"2-digit\",\r\n        minute: \"2-digit\",\r\n      });\r\n\r\n      datosDia.push({\r\n        Temperatura: hora.temp,\r\n        Humedad: hora.humidity,\r\n        Viento: hora.wind_speed,\r\n        Hora: tiempoEnHoras,\r\n      });\r\n  });\r\n\r\n  return (\r\n      <div className=\"grafica-dia\">\r\n      <h2 className=\"grafica-dia-titulo\">Grafica del Día</h2>\r\n        <ResponsiveContainer className=\"grafica-dia-container\" width=\"100%\" height={125}>\r\n            \r\n                <AreaChart data={datosDia}>\r\n\r\n                  {graficoEnPantalla?\r\n                  (\r\n                    <Area\r\n                      type=\"monotone\"\r\n                      dataKey={graficoEnPantalla.dataKey}\r\n                      fill={graficoEnPantalla.fill}\r\n                      stroke={graficoEnPantalla.stroke}\r\n                      unit={graficoEnPantalla.unit}\r\n                    />\r\n                  ):(\r\n                    <br/>\r\n                  )}\r\n\r\n                    <XAxis dataKey=\"Hora\" />\r\n                    <Tooltip />\r\n                </AreaChart>\r\n\r\n        </ResponsiveContainer>\r\n          <div>\r\n            <button className=\"grafica-dia-boton\" id=\"grafica-dia-boton-temperatura\" onClick={() => setGraficoEnPantalla(datosGraficos.get(\"temperatura\"))}>Temperatura</button>\r\n            <button className=\"grafica-dia-boton\" id=\"grafica-dia-boton-humedad\" onClick={() => setGraficoEnPantalla(datosGraficos.get(\"humedad\"))}>Humedad</button>\r\n            <button className=\"grafica-dia-boton\" id=\"grafica-dia-boton-viento\" onClick={() => setGraficoEnPantalla(datosGraficos.get(\"viento\"))}>Viento</button>\r\n\r\n          </div>\r\n        </div>\r\n  );\r\n}\r\n\r\nexport default GraficaDia;\r\n","import styled from 'styled-components';\r\n\r\nconst StyledPantallaCarga = styled.h1`\r\n color: blue;\r\n`\r\n\r\nfunction PantallaCarga(){\r\n    return(\r\n        <StyledPantallaCarga>Cargando...</StyledPantallaCarga>\r\n    )\r\n};\r\n\r\nexport default PantallaCarga;","import DatosPrincipales from \"./DatosPrincipales\";\r\nimport DatosBasicos from \"./DatosBasicos\";\r\nimport PronosticoSemana from \"./PronosticoSemana\";\r\nimport GraficaDia from \"./GraficaDia\";\r\nimport PantallaCarga from \"./PantallaCarga\";\r\n\r\nfunction CuerpoDatos(props){\r\n    const datos = props.datos; \r\n    const datosNombre = props.datosNombre;\r\n    const cargando = props.cargando;\r\n\r\n    console.log(cargando);\r\n\r\n    return(\r\n        <div className=\"cuerpo-datos\">\r\n            {\r\n                cargando?(\r\n                        <h1>Cargando</h1>\r\n                ):(\r\n                    <div className=\"clima-datos\">\r\n                        <DatosPrincipales datos={datos} datosNombreLugar={datosNombre}></DatosPrincipales>\r\n                        <PronosticoSemana datos={datos}></PronosticoSemana>\r\n                        <GraficaDia datos={datos.hourly}></GraficaDia>\r\n                    </div>\r\n                )\r\n\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CuerpoDatos;","function Ciudad(props){\r\n    const datos = props.datos;\r\n    const cargando = props.cargando;\r\n\r\n    const temperatura = Math.floor(datos.main.temp - 273.15);\r\n\r\n    return(\r\n        <div className=\"ciudad\">\r\n            {\r\n                cargando?(\r\n                    <h2>Cargando</h2>\r\n                ):(\r\n                    <div onClick={() => {\r\n                        props.pruebaLevantarEstado(props.datos, props.datos.coord, false);\r\n                        }}>\r\n                            \r\n                        <h3>{datos.name}, {datos.sys.country}</h3>\r\n                        <ul>\r\n                            <li>{temperatura}ºC</li>\r\n                            <li>{datos.main.humidity}%</li>\r\n                        </ul>\r\n                        <p>Latitud: {datos.coord.lat}, Longitud: {datos.coord.lon}</p>\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Ciudad;","import Ciudad from \"./Ciudad\"\r\n\r\nfunction CiudadesBuscadas(props){\r\n    const ciudades = props.ciudades;\r\n    const cargando = props.cargando;\r\n    let keyID = 0;\r\n\r\n\r\n    return(\r\n        <div>\r\n            {\r\n                cargando?(\r\n                    <h1>Cargandioo</h1>\r\n                ):(\r\n                    <div>\r\n                        {ciudades.list.map((datosCiudad)=>{\r\n                            keyID += 1;\r\n                    \r\n                            return <Ciudad key={keyID} datos={datosCiudad} pruebaLevantarEstado={props.pruebaLevantarEstado} cargando={cargando}></Ciudad>\r\n                        })}\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CiudadesBuscadas;\r\n\r\n","import CuerpoDatos from \"./pronosticoClima/CuerpoDatos\";\r\nimport CiudadesBuscadas from \"./Ciudades/CiudadesBuscadas\";\r\n\r\nfunction Contenido(props){\r\n    const climaCiudadesPorNombre = props.climaCiudadesPorNombre;\r\n    const datosCiudad = props.datosCiudad;\r\n    const climaPorCoords = props.climaPorCoords;\r\n    const pruebaLevantarEstado = props.pruebaLevantarEstado;\r\n    const coordsCiudadCargando = props.coordsCiudadCargando;\r\n\r\n\r\n    return(\r\n        <div>\r\n            {\r\n                !coordsCiudadCargando && climaPorCoords?.datos?(\r\n                    <CuerpoDatos datos={climaPorCoords.datos} datosNombre={datosCiudad} cargando={climaPorCoords.cargando}></CuerpoDatos>\r\n                   \r\n                ):(\r\n                    <CiudadesBuscadas ciudades={climaCiudadesPorNombre.datos} cargando={climaCiudadesPorNombre.cargando} pruebaLevantarEstado={pruebaLevantarEstado}></CiudadesBuscadas>\r\n                )                \r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contenido;","function BotonBusqueda(props){\r\n   return(\r\n    <button type=\"button\" className=\"boton-busqueda\" onClick={() => {props.levantarBusqueda(props.lugarEnBusqueda)}}>Buscar</button>\r\n   )\r\n}\r\n\r\n\r\nexport default BotonBusqueda;","function InputCiudad(props){\r\n    const levantarCambio = (event) =>{\r\n        props.levantarInput(event);\r\n    }\r\n\r\n    return(<input className=\"input-ciudad\" type=\"text\" onChange={levantarCambio}/>);  \r\n}\r\n\r\n\r\n\r\nexport default InputCiudad;","import BotonBusqueda from \"./BotonBusqueda\";\r\nimport InputCiudad from \"./InputCiudad\";\r\n\r\nfunction Buscador(props){\r\n   return(\r\n       <div className=\"buscador\">\r\n        <InputCiudad levantarInput={props.levantarInput}></InputCiudad>\r\n        <BotonBusqueda levantarBusqueda={props.levantarBusqueda} lugarEnBusqueda={props.lugarEnBusqueda}></BotonBusqueda>\r\n         </div>\r\n   )\r\n}\r\n\r\n\r\nexport default Buscador;","import {useState} from \"react\";\r\nimport useFetchClimaPorCoords from \"./customHooks/useFetchClimaPorCoords\";\r\nimport useFetchClimaCiudadesPorNombre from \"./customHooks/useFetchClimaCiudadesPorNombre\";\r\nimport Contenido from \"./Contenido\";\r\nimport Buscador from \"./Buscador/Buscador\";\r\n\r\n\r\nfunction PronosticoClima() {\r\n  const [lugarEnBusqueda, setLugarEnBusqueda] = useState(null);\r\n  const [lugarBuscado, setLugarBuscado] = useState(null);\r\n  const [lugarCargando, setLugarCargando] = useState(true);\r\n\r\n  const [datosCiudad, setDatosCiudad] = useState(null);\r\n  const [coordsCiudad, setCoordsCiudad] = useState(null);\r\n  const [coordsCiudadCargando, setCoordsCiudadCargando] = useState(true);\r\n\r\n  const resultadoClimaCiudadesPorNombre = useFetchClimaCiudadesPorNombre(lugarBuscado, lugarCargando);\r\n  const resultadoClimaPorCoords = useFetchClimaPorCoords(coordsCiudad, coordsCiudadCargando);\r\n\r\n  const mensajeResultado = resultadoClimaCiudadesPorNombre.mensajeResultado;\r\n  const mensajeDeCarga = resultadoClimaCiudadesPorNombre.cargando;\r\n\r\n  const pruebaLevantarEstado = (datosCiudadLevantados, coordsCiudadLevantados, coordsCiudadCargandoLevantados) =>{\r\n    setDatosCiudad(datosCiudadLevantados);\r\n    setCoordsCiudad(coordsCiudadLevantados);\r\n    setCoordsCiudadCargando(coordsCiudadCargandoLevantados);\r\n    \r\n  }\r\n\r\n  const levantarBusqueda = (lugarEnBusqueda) =>{\r\n    setLugarBuscado(lugarEnBusqueda); \r\n    setLugarCargando(false); \r\n    setCoordsCiudadCargando(true);\r\n  }\r\n\r\n  const levantarInput = (event) =>{\r\n    setLugarEnBusqueda(event.target.value); \r\n    setLugarCargando(true);\r\n  }\r\n  \r\n    return(\r\n      <div>\r\n          <Buscador \r\n            levantarInput={levantarInput} \r\n            levantarBusqueda={levantarBusqueda} \r\n            lugarEnBusqueda={lugarEnBusqueda}>\r\n          </Buscador>\r\n        <div> \r\n          {mensajeDeCarga? (\r\n            <h2 className=\"mensaje-resultado\">{mensajeResultado}</h2>\r\n          ):(   \r\n            <Contenido \r\n              climaCiudadesPorNombre={resultadoClimaCiudadesPorNombre} \r\n              datosCiudad={datosCiudad} \r\n              coordsCiudadCargando={coordsCiudadCargando} \r\n              climaPorCoords={resultadoClimaPorCoords} \r\n              pruebaLevantarEstado={pruebaLevantarEstado}>\r\n            </Contenido>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  \r\n\r\n}\r\n\r\nexport default PronosticoClima;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport PronosticoClima from './PronosticoClima.js';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <PronosticoClima/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}